<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css" integrity="sha512-DTOQO9RWCH3ppGqcWaEA1BIZOC6xxalwEsw9c2QQeAIftl+Vegovlnee1c9QX4TctnWMn13TZye+giMm8e2LwA==" crossorigin="anonymous" referrerpolicy="no-referrer" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">
    <title>Add Product</title>
    <style>
        .image-preview {
            max-width: 25%;
            height: auto;
            margin-top: 10px;
        }

        .remove-image {
            cursor: pointer;
            color: #ff0000;
            font-size: 20px;
        }

        .image-container {
            position: relative;
            display: inline-block;
        }
    </style>
</head>

<body class="bg-light " style="padding-bottom: 10%;">
    <!-- Your existing code here -->
    <%- include('adminNav') %>
    <div class="container-fluid d-flex p-0">
        <div class="left">
            <%- include('adminSidebar') %>
        </div>
        <div class="card mt-3" style="width: 800px;margin-left: 15%;height: fit-content;">
            <div class="card-body">
                <form id="addProductForm" action="/admin/addProduct" method="post" enctype="multipart/form-data" onsubmit="return validateForm()">
                    <div class="mb-3">
                        <label for="name" class="form-label">Product Name:</label>
                        <input type="text" id="name" name="name" class="form-control" >
                        <div id="nameError" class="text-danger"></div> <!-- Error message container -->
                    </div>

                    <div class="mb-3">
                        <label for="description" class="form-label">Product Description:</label>
                        <textarea id="description" name="description" class="form-control" ></textarea>
                        <div id="descriptionError" class="text-danger"></div> <!-- Error message container -->
                    </div>

                    <div class="mb-3">
                        <label for="price" class="form-label">Product Price:</label>
                        <input type="number" id="price" name="price" class="form-control" >
                        <div id="priceError" class="text-danger"></div> <!-- Error message container -->
                    </div>

                    <div class="mb-3">
                        <label for="category" class="form-label">Product Category:</label>
                        <select id="category" name="category" class="form-select" >
                            <option value="">Select Category</option> <!-- Empty option for default selection -->
                            <% categorydata.forEach(element => { %>
                                <option value="<%= element.name %>"><%= element.name %></option>
                            <% }) %>
                        </select>
                        <div id="categoryError" class="text-danger"></div> <!-- Error message container -->
                    </div>

                    <div class="mb-3 ">
                        <label for="brand" class="form-label">Brand:</label>
                        <input type="text" id="brand" name="brand" class="form-control" >
                        <div id="brandError" class="text-danger"></div> <!-- Error message container -->
                    </div>

                    <div class="mb-3">
                        <label for="quantity" class="form-label">Product Quantity:</label>
                        <input type="number"  id="quantity" name="quantity" class="form-control" >
                        <div id="quantityError" class="text-danger"></div> <!-- Error message container -->
                    </div>

                    <div class="mb-3">
                        <label for="image" class="form-label">Product Image:</label>
                        <input type="file" id="image" multiple name="image" class="form-control" accept="image/png,image/jpg, image/jpeg, image/webp" onchange="previewImages(this)" >
                        <div id="imageError" class="text-danger"></div> <!-- Error message container -->

                        <div id="image-preview-container" class="mt-2"></div>
                    </div>

                    <button type="submit" class="btn btn-primary">Add Product</button>
                </form>
            </div>
        </div>
    </div>
   
    <script>
        function validateForm() {
            // Clear previous error messages
            document.querySelectorAll('.text-danger').forEach(element => element.textContent = '');

            const name = document.getElementById('name').value.trim();
            const description = document.getElementById('description').value.trim();
            const price = document.getElementById('price').value.trim();
            const category = document.getElementById('category').value.trim();
            const brand = document.getElementById('brand').value.trim();
            const quantity = document.getElementById('quantity').value.trim();
            const image = document.getElementById('image').files;

            let isValid = true;

            // Check if any field is empty
            if (!name) {
                document.getElementById('nameError').textContent = 'Name is required.';
                isValid = false;
            }

            if (!description) {
                document.getElementById('descriptionError').textContent = 'Description is required.';
                isValid = false;
            }

            if (!price) {
                document.getElementById('priceError').textContent = 'Price is required.';
                isValid = false;
            } else if (parseFloat(price) <= 0) {
                document.getElementById('priceError').textContent = 'Price must be a positive value.';
                isValid = false;
            }

            if (!category) {
                document.getElementById('categoryError').textContent = 'Category is required.';
                isValid = false;
            }

            if (!brand) {
                document.getElementById('brandError').textContent = 'Brand is required.';
                isValid = false;
            }

            if (!quantity) {
                document.getElementById('quantityError').textContent = 'Quantity is required.';
                isValid = false;
            } else if (parseInt(quantity) < 0) {
                document.getElementById('quantityError').textContent = 'Quantity cannot be negative.';
                isValid = false;
            }

            // Validate banner image
            const fileInput = document.getElementById('image');
            const files = fileInput.files;

            if (files.length === 0) {
                document.getElementById('imageError').textContent = 'Please select at least one banner image.';
                isValid = false;
            } else {
                const allowedExtensions = /(\.jpg|\.jpeg|\.png|\.gif|\.svg|\.webp)$/i; // Updated regex to include SVG
                for (let i = 0; i < files.length; i++) {
                    const file = files[i];
                    if (!allowedExtensions.exec(file.name)) {
                        document.getElementById('imageError').textContent = 'Only JPG, JPEG, PNG, GIF, and SVG files are allowed.';
                        isValid = false;
                        break;
                    }
                }
            }
            
            return isValid; // Form is valid
        }

        function previewImages(input) {
            const previewContainer = document.getElementById('image-preview-container');
            previewContainer.innerHTML = '';

            const files = input.files;

            for (let i = 0; i < files.length; i++) {
                const file = files[i];
                const reader = new FileReader();

                reader.onload = function (e) {
                    const preview = document.createElement('div');
                    preview.classList.add('image-container', 'd-flex', 'flex-column', 'align-items-center');

                    const image = document.createElement('img');
                    image.classList.add('image-preview');
                    image.src = e.target.result;

                    const removeIcon = document.createElement('i');
                    removeIcon.classList.add('fas', 'fa-times', 'remove-image', 'mt-2');
                    removeIcon.setAttribute('data-index', i);
                    removeIcon.addEventListener('click', removeImage);

                    preview.appendChild(image);
                    preview.appendChild(removeIcon);

                    previewContainer.appendChild(preview);

                    // Initialize Cropper for each image
                    const cropper = new Cropper(image, {
                        aspectRatio: NaN, // Set the aspect ratio as needed
                        viewMode: 2,    // Set the view mode as needed
                    });
                };

                reader.readAsDataURL(file);
            }
        }

        function removeImage(event) {
            const indexToRemove = event.target.getAttribute('data-index');
            const input = document.getElementById('image');
            const files = Array.from(input.files);

            // Remove the preview
            const previewContainer = document.getElementById('image-preview-container');
            const previewToRemove = event.target.parentElement;
            previewContainer.removeChild(previewToRemove);

            // Reindex data-index attributes
            const previews = previewContainer.getElementsByClassName('remove-image');
            for (let i = 0; i < previews.length; i++) {
                previews[i].setAttribute('data-index', i);
            }

            // Remove the corresponding file from the files array
            files.splice(indexToRemove, 1);

            // Create a new FileList and update the input value
            const newFileList = new DataTransfer();
            files.forEach(file => newFileList.items.add(file));
            input.files = newFileList.files;
        }
    </script>

</body>
</html>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <style>
        /* Colored toaster styling */
        .colored-toast {
            background-color: #f8d7da; /* Light red background color */
            border: 1px solid #f5c6cb; /* Red border color */
        }
    </style>
</head>
<body>
    <%- include('adminNav') %>
    <div class="container-fluid d-flex p-0">
        <%- include('adminSidebar') %>
        <div class="container-fluid p-0">
            <div class="heading text-center " style="background-color: rgb(233, 233, 232);height: 35px;margin: 0%;">
                <h3>Return Management</h3>
            </div>
            <% orderData.forEach(order => { %>
                <% order.orderItems.forEach(item => { %>
                    <% if (!(item.rtnApproved || item.rtnRejected)) { %>
                        <div class="container mt-4" style="background-color: rgb(241, 241, 241); padding: 10px;">
                            <div class="row">
                                <div class="col-md-2">
                                    <img src="/<%= item.product.imageUrl %>" alt="Product Image" style="width:100px;" >
                                </div>
                                <div class="col-md-4">
                                    <h5>Product Name: <%= item.product.name %></h5>
                                    <p>Quantity: <%= item.quantity %></p>
                                    <p>Price: Rs<%= ' '+item.price %></p>
                                </div>
                                <div class="col-md-4 text-center">
                                    <p>Reason: <%= item.reason %></p>
                                </div>
                                <div class="col-md-2">
                                    <button class="btn btn-primary" onclick="acceptReturn('<%= order._id %>', '<%= item._id %>')">Accept</button>
                                    <button class="btn btn-danger" onclick="rejectReturn('<%= order._id %>', '<%= item._id %>')">Reject</button>
                                </div>
                                
                            </div>
                        </div>
                    <% } %>
                <% }) %>
            <% }) %>
        </div>
    </div>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
    async function acceptReturn(orderId, orderItemId) {
        console.log('Accept return for order ID:', orderId, 'and order item ID:', orderItemId);
        // Add your logic to handle accepting the return here
        try {
            const response = await fetch(`/admin/acceptReturn/${orderId}/${orderItemId}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                    // Add any additional headers if needed
                }
                // Add body if needed for sending data to the backend
            });

            const data = await response.json();

            // Check if the request was successful
            if (response.ok) {
                console.log(data.message); // Log success message
                // You can handle the success response here
                const Toast = Swal.mixin({
                    toast: true,
                    position: 'top-end',
                    iconColor: 'green',
                    customClass: {
                        popup: 'colored-toast',
                    },
                    showConfirmButton: false,
                    timer: 1500,
                    timerProgressBar: true,
                });
                await Toast.fire({
                    icon: 'success',
                    title: data.message,
                });
                setTimeout(()=>{
                    window.location.reload()
                },1500)
                
            } else {
                console.error(data.error); // Log error message
                // You can handle the error response here
            }
        } catch (error) {
            console.error('Error:', error); // Log any network or other errors
            // You can handle errors here
        }
    }

    async function rejectReturn(orderId, orderItemId) {
        console.log('Reject return for order ID:', orderId, 'and order item ID:', orderItemId);
        // Add your logic to handle rejecting the return here
        try {
            const response = await fetch(`/admin/rejectReturn/${orderId}/${orderItemId}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                    // Add any additional headers if needed
                }
                // Add body if needed for sending data to the backend
            });

            const data = await response.json();

            // Check if the request was successful
            if (response.ok) {
                console.log(data.message); // Log success message
                // You can handle the success response here
                const Toast = Swal.mixin({
                    toast: true,
                    position: 'top-end',
                    iconColor: 'green',
                    customClass: {
                        popup: 'colored-toast',
                    },
                    showConfirmButton: false,
                    timer: 1500,
                    timerProgressBar: true,
                });
                await Toast.fire({
                    icon: 'success',
                    title: data.message,
                });
                setTimeout(()=>{
                    window.location.reload()
                },1500)
                
            } else {
                console.error(data.error); // Log error message
                // You can handle the error response here
            }
        } catch (error) {
            console.error('Error:', error); // Log any network or other errors
            // You can handle errors here
        }
    }
</script>
</body>
</html>

<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet"
    integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">
  <link rel="stylesheet" href="css/otp.css">
  <title>Document</title>
</head>

<body>
  <div id="errorMessageContainer" class="alert alert-danger" role="alert" style="display: none;"></div>
      <form method="post" action="/verifyotp">
        <section>
          <div class="row justify-content-center ">
            <div class="col-12 col-md-6 col-lg-4" style="min-width: 500px;">
              <div class="card bg-white mb-5  border-0" style="box-shadow: 0 12px 15px rgba(0, 0, 0, 0.02);">
                <div class="card-body p-5 text-center">
                  <h4>Verify</h4>
                  <p>Your code was sent to you via email</p>

                  <div class="otp-field mb-4">
                    <input type="number" name="digit1" />
                    <input type="number" name="digit2" disabled />
                    <input type="number" name="digit3" disabled />
                    <input type="number" name="digit4" disabled />
                    <input type="number" name="digit5" disabled />
                    <input type="number" name="digit6" disabled />
                  </div>

                  <button type="submit" class="btn btn-primary mb-3" id="verifyBtn">
                    Verify
                  </button>

                  <p class="resend text-muted mb-0 ">
                    Didn't receive code? <a href="/resendotp" id="resendBtn" onclick="requestAgain()" class="hidden"> Request again</a>
                  </p>
                  <div id="countdown"></div>
                </div>
              </div>
            </div>
          </div>
        </section>
      </form>

      <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL"
        crossorigin="anonymous"></script>
</body>
<script>
  function startCountdown(durationInSeconds) {
    let duration = durationInSeconds;
    const countdownElement = document.getElementById('countdown');
    const resendButton = document.getElementById('resendBtn');

    function updateCountdown() {
      const minutes = Math.floor(duration / 60);
      const seconds = duration % 60;

      countdownElement.textContent = `${minutes}:${seconds}`;

      if (duration <= 0) {
        clearInterval(countdownInterval);
        // Handle countdown expiration, for example, enable the Resend OTP link
        resendButton.classList.remove('hidden');
        resendButton.style.pointerEvents = 'auto'; // Re-enable click events
        resendButton.href = '/resendotp'; // Set the correct href
      } else {
        duration--;
        resendButton.classList.add('hidden');
        resendButton.style.pointerEvents = 'none'; // Disable click events during countdown
      }
    }

    // Initial call to start the countdown
    updateCountdown();

    // Set up the interval to update the countdown every second
    const countdownInterval = setInterval(updateCountdown, 1000);

    // Return the interval ID to keep track of it
    return countdownInterval;
  }

  // Call startCountdown with the desired duration (60 seconds in this example)
  let intervalId = startCountdown(60);

  // Function to handle "Request again" click
  function requestAgain() {
    clearInterval(intervalId); // Clear the previous countdown interval
    intervalId = startCountdown(60); // Reset the countdown
    resendButton.classList.add('hidden');
  }

  const form = document.querySelector('form');
  const digitInputs = document.querySelectorAll('.otp-field > input');

  form.addEventListener('submit',async function (event) {
    event.preventDefault();

    // Collect OTP values from the input fields and join them
    const otpValue = Array.from(digitInputs).map(input => input.value).join('');

    // Make the fetch request
    const response = await fetch('/verifyotp', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ otp: otpValue }),
    })
    const result = await response.json();
    if (result.success) {
        // Redirect to the specified URL
        window.location.href = `/userrefferal/${result.newuser._id}`;
    }else{
      const errorMessage = document.getElementById('errorMessageContainer');
      errorMessage.innerHTML = `<p>${result.message}</p>`;
      errorMessage.style.display = 'block';

      // Hide the message after 2 seconds
      setTimeout(() => {
        errorMessage.innerHTML = '';
        errorMessage.style.display = 'none';
      }, 2000);
    }
  });

  const inputs = document.querySelectorAll(".otp-field > input");
  const button = document.querySelector(".btn");

  window.addEventListener("load", () => inputs[0].focus());
  button.setAttribute("disabled", "disabled");

  inputs[0].addEventListener("paste", function (event) {
    event.preventDefault();

    const pastedValue = (event.clipboardData || window.clipboardData).getData("text");
    const otpLength = inputs.length;

    for (let i = 0; i < otpLength; i++) {
      if (i < pastedValue.length) {
        inputs[i].value = pastedValue[i];
        inputs[i].removeAttribute("disabled");
        inputs[i].focus();
      } else {
        inputs[i].value = ""; // Clear any remaining inputs
        inputs[i].focus();
      }
    }
  });

  inputs.forEach((input, index1) => {
    input.addEventListener("keyup", (e) => {
      const currentInput = input;
      const nextInput = input.nextElementSibling;
      const prevInput = input.previousElementSibling;

      if (currentInput.value.length > 1) {
        currentInput.value = "";
        return;
      }

      if (
        nextInput &&
        nextInput.hasAttribute("disabled") &&
        currentInput.value !== ""
      ) {
        nextInput.removeAttribute("disabled");
        nextInput.focus();
      }

      if (e.key === "Backspace") {
        inputs.forEach((input, index2) => {
          if (index1 <= index2 && prevInput) {
            input.setAttribute("disabled", true);
            input.value = "";
            prevInput.focus();
          }
        });
      }

      button.classList.remove("active");
      button.setAttribute("disabled", "disabled");

      const inputsNo = inputs.length;
      if (!inputs[inputsNo - 1].disabled && inputs[inputsNo - 1].value !== "") {
        button.classList.add("active");
        button.removeAttribute("disabled");

        return;
      }
    });
  });
</script>

</html>